openapi: 3.0.0
info:
  title: Search API
  version: v1
  description: Search API

servers:
  - url: https://falcon.ci.folio.org/search/

paths:
  /instances:
    get:
      operationId: searchInstances
      description: Get a list of instances for CQL query
      parameters:
        - $ref: '#/components/parameters/x-okapi-tenant-header'
        - $ref: '#/components/parameters/cql-query'
        - $ref: '#/components/parameters/limit-param'
        - $ref: '#/components/parameters/offset-param'
        - $ref: '#/components/parameters/expand-all-param'
      responses:
        '200':
          description: 'Instance search result'
          content:
            application/json:
              example: examples/searchResult.sample
              schema:
                $ref: '#/components/schemas/instanceSearchResult'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /instances/ids:
    get:
      operationId: getInstanceIds
      description: Get a list of instance ids for CQL query
      parameters:
        - $ref: '#/components/parameters/cql-query'
        - $ref: '#/components/parameters/x-okapi-tenant-header'
        - $ref: '#/components/parameters/content-type-header'
      responses:
        '200':
          description: 'Instance ids as json stream'
          content:
            application/json:
              example: examples/InstanceIdsResult.sample
            application/text:
              example: examples/IdsTextResult.sample
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /holdings/ids:
    get:
      operationId: getHoldingIds
      description: Get a list of holding ids linked to instances found by the CQL query
      parameters:
        - $ref: '#/components/parameters/cql-query'
        - $ref: '#/components/parameters/x-okapi-tenant-header'
        - $ref: '#/components/parameters/content-type-header'
      responses:
        '200':
          description: 'Instance ids as json stream'
          content:
            application/json:
              example: examples/HoldingIdsResult.sample
            application/text:
              example: examples/IdsTextResult.sample
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /{recordType}/facets:
    get:
      operationId: getFacets
      description: Provides list of facets for the record type
      parameters:
        - name: recordType
          required: true
          in: path
          schema:
            "$ref": "#/components/schemas/RecordType"
        - $ref: '#/components/parameters/cql-query'
        - $ref: '#/components/parameters/facet-param'
        - $ref: '#/components/parameters/x-okapi-tenant-header'
      responses:
        '200':
          description: 'Facet search result'
          content:
            application/json:
              example: examples/facetResult.sample
              schema:
                $ref: '#/components/schemas/facetResult'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /authorities:
    get:
      operationId: searchAuthorities
      description: Get a list of authorities for CQL query
      parameters:
        - $ref: '#/components/parameters/x-okapi-tenant-header'
        - $ref: '#/components/parameters/cql-query'
        - $ref: '#/components/parameters/limit-param'
        - $ref: '#/components/parameters/offset-param'
        - $ref: '#/components/parameters/expand-all-param'
      responses:
        '200':
          description: 'Authorities search result'
          content:
            application/json:
              example: examples/searchResult.sample
              schema:
                $ref: '#/components/schemas/authoritySearchResult'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /browse/call-numbers/instances:
    get:
      operationId: browseInstancesByCallNumber
      description: Provides list of instances for browsing by call number
      parameters:
        - $ref: '#/components/parameters/cql-query'
        - $ref: '#/components/parameters/limit-param'
        - $ref: '#/components/parameters/expand-all-param'
        - $ref: '#/components/parameters/x-okapi-tenant-header'
        - $ref: '#/components/parameters/highlight-match'
        - $ref: '#/components/parameters/preceding-records-count'
      responses:
        '200':
          description: 'Search result for browsing by call number'
          content:
            application/json:
              example: examples/searchResult.sample
              schema:
                $ref: '#/components/schemas/callNumberBrowseResult'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /browse/subjects/instances:
    get:
      operationId: browseInstancesBySubject
      description: Provides list of instances for browsing by subject
      parameters:
        - $ref: '#/components/parameters/cql-query'
        - $ref: '#/components/parameters/limit-param'
        - $ref: '#/components/parameters/x-okapi-tenant-header'
        - $ref: '#/components/parameters/highlight-match'
        - $ref: '#/components/parameters/preceding-records-count'
      responses:
        '200':
          description: 'Search result for browsing by call number'
          content:
            application/json:
              example: examples/searchResult.sample
              schema:
                $ref: '#/components/schemas/subjectBrowseResult'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /browse/authorities:
    get:
      operationId: browseAuthorities
      description: Provides list of authorities by headingRef
      parameters:
        - $ref: '#/components/parameters/cql-query'
        - $ref: '#/components/parameters/limit-param'
        - $ref: '#/components/parameters/expand-all-param'
        - $ref: '#/components/parameters/x-okapi-tenant-header'
        - $ref: '#/components/parameters/highlight-match'
        - $ref: '#/components/parameters/preceding-records-count'
      responses:
        '200':
          description: 'Search result for browsing by authorities'
          content:
            application/json:
              example: examples/searchResult.sample
              schema:
                $ref: '#/components/schemas/authorityBrowseResult'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /index/indices:
    post:
      operationId: createIndices
      description: Creates indices for passed resource name and tenant id in request header.
      parameters:
        - $ref: '#/components/parameters/x-okapi-tenant-header'
      requestBody:
        content:
          application/json:
            example: examples/indexRequestBody.sample
            schema:
              $ref: schemas/request/createIndexRequest.json
      responses:
        '200':
          description: Response with created indices and status (error message will be present if operation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folioCreateIndexResponse'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /index/mappings:
    post:
      operationId: updateMappings
      description: Creates mappings for passed resource name and tenant id in request header.
      parameters:
        - $ref: '#/components/parameters/x-okapi-tenant-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: schemas/request/updateMappingsRequest.json
      responses:
        '200':
          description: Response with created indices and status (error message will be present if operation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folioIndexOperationResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /index/records:
    post:
      operationId: indexRecords
      description: Indexes the records into elasticsearch.
      requestBody:
        content:
          application/json:
            example: examples/indexRecordRequestBody.sample
            schema:
              $ref: '#/components/schemas/indexRecordRequest'
      responses:
        '200':
          description: Response with created indices and status (error message will be present if operation failed)
          content:
            application/json:
              example: examples/indexRecordResponse.sample
              schema:
                $ref: '#/components/schemas/folioIndexOperationResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /index/inventory/reindex:
    post:
      operationId: reindexInventoryRecords
      description: Initiates reindex for the inventory records
      requestBody:
        content:
          application/json:
            example: examples/reindexRequest.sample
            schema:
              $ref: schemas/request/reindexRequest.json
      parameters:
        - $ref: '#/components/parameters/x-okapi-tenant-header'
      responses:
        '200':
          description: Reindex operation has been started
          content:
            application/json:
              schema:
                $ref: schemas/reindexJob.json
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /config/languages:
    post:
      operationId: createLanguageConfig
      description: Save languages that will be used for analyzers
      requestBody:
        content:
          application/json:
            schema:
              $ref: schemas/languageConfig.json
      responses:
        '200':
          description: Language support has been added.
          content:
            application/json:
              schema:
                $ref: schemas/languageConfig.json
        '422':
          $ref: '#/components/responses/unprocessableEntityResponse'
    get:
      operationId: getAllLanguageConfigs
      description: Get all supported languages
      responses:
        '200':
          description: All supported languages
          content:
            application/json:
              schema:
                $ref: schemas/languageConfigs.json

  /config/languages/{code}:
    put:
      operationId: updateLanguageConfig
      description: Update language config settings
      parameters:
        - $ref: '#/components/parameters/language-code'
      requestBody:
        content:
          application/json:
            schema:
              $ref: schemas/languageConfig.json
      responses:
        '200':
          description: Language support has been added.
          content:
            application/json:
              schema:
                $ref: schemas/languageConfig.json
        '422':
          $ref: '#/components/responses/unprocessableEntityResponse'
    delete:
      operationId: deleteLanguageConfig
      description: Delete all supported languages
      parameters:
        - $ref: '#/components/parameters/language-code'
      responses:
        '204':
          description: Language support has been removed
        '404':
          description: No language support is found

  /config/features:
    post:
      operationId: saveFeatureConfiguration
      description: Save feature configuration (enables or disables pre-defined optional search options)
      requestBody:
        content:
          application/json:
            schema:
              $ref: schemas/featureConfig.json
      responses:
        '200':
          description: Language support has been added.
          content:
            application/json:
              schema:
                $ref: schemas/featureConfig.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '422':
          $ref: '#/components/responses/unprocessableEntityResponse'
    get:
      operationId: getAllFeatures
      description: Get all feature configurations per tenant
      responses:
        '200':
          description: All feature configurations
          content:
            application/json:
              schema:
                $ref: schemas/featureConfigs.json

  /config/features/{featureId}:
    put:
      operationId: updateFeatureConfiguration
      description: Update feature configuration settings
      parameters:
        - $ref: '#/components/parameters/feature-id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: schemas/featureConfig.json
      responses:
        '200':
          description: Feature configuration has been added.
          content:
            application/json:
              schema:
                $ref: schemas/featureConfig.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '422':
          $ref: '#/components/responses/unprocessableEntityResponse'
    delete:
      operationId: deleteFeatureConfigurationById
      description: Delete feature configuration by id
      parameters:
        - $ref: '#/components/parameters/feature-id'
      responses:
        '204':
          description: Feature configuration has been removed
        '404':
          description: No feature configuration is found by id

components:
  schemas:
    instance:
      $ref: schemas/instance.json
    item:
      $ref: schemas/item.json
    folioCreateIndexResponse:
      $ref: schemas/folioCreateIndexResponse.json
    folioIndexOperationResponse:
      $ref: schemas/folioIndexOperationResponse.json
    resourceEvent:
      $ref: schemas/resourceEvent.json
    indexRecordRequest:
      type: array
      items:
        $ref: '#/components/schemas/resourceEvent'
    instanceSearchResult:
      $ref: schemas/response/instanceSearchResult.json
    authoritySearchResult:
      $ref: schemas/response/authoritySearchResult.json
    callNumberBrowseResult:
      $ref: schemas/response/callNumberBrowseResult.json
    subjectBrowseResult:
      $ref: schemas/response/subjectBrowseResult.json
    authorityBrowseResult:
      $ref: schemas/response/authorityBrowseResult.json
    facetResult:
      $ref: schemas/response/facetResult.json
    resourceIds:
      $ref: schemas/response/resourceIds.json
    errorResponse:
      $ref: schemas/errors.json
    reindexRequest:
      $ref: schemas/request/reindexRequest.json
    RecordType:
      enum: [ "instances", "authorities" ]
      type: string

  responses:
    unprocessableEntityResponse:
      description: Validation error for the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
    badRequestResponse:
      description: Validation errors
      content:
        application/json:
          example: examples/validationErrorResponse.sample
          schema:
            $ref: "#/components/schemas/errorResponse"
    internalServerErrorResponse:
      description: When unhandled exception occurred during code execution, e.g. NullPointerException
      content:
        application/json:
          example: examples/unknownError.sample

  parameters:
    limit-param:
      in: query
      name: limit
      description: Limit the number of elements returned in the response.
      schema:
        type: integer
        minimum: 0
        maximum: 500
        default: 100
    offset-param:
      in: query
      name: offset
      description: Skip over a number of elements by specifying an offset value for the query.
      schema:
        type: integer
        minimum: 0
        default: 0
    cql-query:
      name: query
      in: query
      required: true
      description: A CQL query string with search conditions.
      schema:
        type: string
    expand-all-param:
      in: query
      name: expandAll
      description: Whether to return only basic properties or entire instance.
      schema:
        type: boolean
        default: false
    facet-param:
      in: query
      name: facet
      description: List of facet names.
      required: true
      schema:
        type: array
        items:
          type: string
    language-code:
      name: code
      in: path
      required: true
      description: Language code
      schema:
        type: string
        pattern: '[a-zA-Z]{3}'
    feature-id:
      name: featureId
      in: path
      required: true
      description: Feature id (name)
      schema:
        type: string
        enum:
          - search.all.fields
    x-okapi-tenant-header:
      name: x-okapi-tenant
      in: header
      description: X-Okapi-Tenant header value
      required: true
      schema:
        type: string
    content-type-header:
      name: Content-Type
      in: header
      description: Content-Type header value
      required: false
      schema:
        type: string
    preceding-records-count:
      in: query
      name: precedingRecordsCount
      description: Number of preceding records for browsing around and around-including options
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 100
    highlight-match:
      in: query
      name: highlightMatch
      description: Whether to highlight matched resource by query input or not.
      required: false
      schema:
        type: boolean
        default: true
